package aes256cbc

import (
	"bytes"
	"testing"
)

func Test_DecryptAES256CBCPadded(t *testing.T) {
	type args struct {
		data []byte
		key  []byte
		iv   []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantEq  bool
		wantErr bool
	}{
		{
			name: "Decrypt Success",
			args: args{
				data: []byte{0xE0, 0xC7, 0xCF, 0x54, 0xA3, 0xC2, 0xA6, 0xA2, 0x25, 0x2B, 0xD5, 0x4E, 0xA9, 0xFD, 0x8D, 0xF7},
				key:  []byte("12345678901234567890123456789012"),
				iv:   []byte("1234567890123456"),
			},
			want:    []byte("hello world"),
			wantEq:  true,
			wantErr: false,
		},
		{
			name: "Decrypt Error",
			args: args{
				data: []byte{0xE0, 0xC7, 0xCF, 0x54, 0xA3, 0xC2, 0xA6, 0xA2, 0x25, 0x2B, 0xD5, 0x4E, 0xA9, 0xFD, 0x8D, 0xF7},
				key:  []byte("12345678901234567890123456789012"),
				iv:   []byte("1234567890123456"),
			},
			want:    []byte("1hello world"),
			wantEq:  false,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := DecryptAES256CBCPadded(tt.args.data, tt.args.key, tt.args.iv)
			if (err != nil) != tt.wantErr {
				t.Errorf("DecryptAES256CBCPadded() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if bytes.Equal(got, tt.want) != tt.wantEq {
				t.Errorf("DecryptAES256CBCPadded() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_EncryptAES256CBCPadded(t *testing.T) {
	type args struct {
		data []byte
		key  []byte
		iv   []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantEq  bool
		wantErr bool
	}{
		{
			name: "Decrypt Success",
			args: args{
				data: []byte("hello world"),
				key:  []byte("12345678901234567890123456789012"),
				iv:   []byte("1234567890123456"),
			},
			want:    []byte{0xE0, 0xC7, 0xCF, 0x54, 0xA3, 0xC2, 0xA6, 0xA2, 0x25, 0x2B, 0xD5, 0x4E, 0xA9, 0xFD, 0x8D, 0xF7},
			wantEq:  true,
			wantErr: false,
		},
		{
			name: "Decrypt Error",
			args: args{
				data: []byte("1hello world"),
				key:  []byte("12345678901234567890123456789012"),
				iv:   []byte("1234567890123456"),
			},
			want:    []byte{0xE0, 0xC7, 0xCF, 0x54, 0xA3, 0xC2, 0xA6, 0xA2, 0x25, 0x2B, 0xD5, 0x4E, 0xA9, 0xFD, 0x8D, 0xF7},
			wantEq:  false,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := EncryptAES256CBCPadded(tt.args.data, tt.args.key, tt.args.iv)
			if (err != nil) != tt.wantErr {
				t.Errorf("EncryptAES256CBCPadded() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if bytes.Equal(got, tt.want) != tt.wantEq {
				t.Errorf("EncryptAES256CBCPadded() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEncryptFile(t *testing.T) {
	type args struct {
		fileData []byte
		key      []byte
		iv       []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantEq  bool
		wantErr bool
	}{
		{
			name: "Should succeed. Encrypt data from docs example",
			args: args{
				fileData: []byte{
					0x85, 0x19, 0x89, 0xcf, 0x49, 0xa9, 0x41, 0x5f, 0x9d, 0x8e, 0x8b, 0x7e, 0xec, 0x87,
					0x55, 0xfe, 0x1d, 0xc4, 0x9d, 0x5f, 0x8b, 0x07, 0x47, 0x3b, 0x57, 0xd9, 0xec, 0x46,
					0xe9, 0x3c, 0x6e, 0x9f,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
				iv: []byte{
					0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c,
					0x9e, 0xdc, 0x64,
				},
			},
			want: []byte{
				0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
				0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
				0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
				0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
				0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
				0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
				0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
				0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
				0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
				0x17, 0x85,
			},
			wantEq:  true,
			wantErr: false,
		},
		{
			name: "Should not equal. Changed first byte",
			args: args{
				fileData: []byte{
					0x85, 0x19, 0x89, 0xcf, 0x49, 0xa9, 0x41, 0x5f, 0x9d, 0x8e, 0x8b, 0x7e, 0xec, 0x87,
					0x55, 0xfe, 0x1d, 0xc4, 0x9d, 0x5f, 0x8b, 0x07, 0x47, 0x3b, 0x57, 0xd9, 0xec, 0x46,
					0xe9, 0x3c, 0x6e, 0x9f,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
				iv: []byte{
					0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c,
					0x9e, 0xdc, 0x64,
				},
			},
			want: []byte{
				0xff, // 0x16
				0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
				0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
				0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
				0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
				0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
				0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
				0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
				0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
				0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
				0x17, 0x85,
			},
			wantEq:  false,
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := EncryptFile(tt.args.fileData, tt.args.key, tt.args.iv)
			if (err != nil) != tt.wantErr {
				t.Errorf("EncryptFile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if bytes.Equal(got, tt.want) != tt.wantEq {
				t.Errorf("EncryptFile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDecryptFile(t *testing.T) {
	type args struct {
		fileData []byte
		key      []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantEq  bool
		wantErr bool
	}{
		{
			name: "Should succeed. Decrypt data from docs example",
			args: args{
				fileData: []byte{
					0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
					0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
					0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
					0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
					0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
					0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
					0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
					0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
					0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
					0x17, 0x85,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
			},
			want: []byte{
				0x85, 0x19, 0x89, 0xcf, 0x49, 0xa9, 0x41, 0x5f, 0x9d, 0x8e, 0x8b, 0x7e, 0xec, 0x87,
				0x55, 0xfe, 0x1d, 0xc4, 0x9d, 0x5f, 0x8b, 0x07, 0x47, 0x3b, 0x57, 0xd9, 0xec, 0x46,
				0xe9, 0x3c, 0x6e, 0x9f,
			},
			wantEq:  true,
			wantErr: false,
		},
		{
			name: "Should not equal. Changed first byte",
			args: args{
				fileData: []byte{
					0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
					0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
					0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
					0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
					0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
					0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
					0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
					0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
					0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
					0x17, 0x85,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
			},
			want: []byte{
				0xff, // 0x85
				0x19, 0x89, 0xcf, 0x49, 0xa9, 0x41, 0x5f, 0x9d, 0x8e, 0x8b, 0x7e, 0xec, 0x87,
				0x55, 0xfe, 0x1d, 0xc4, 0x9d, 0x5f, 0x8b, 0x07, 0x47, 0x3b, 0x57, 0xd9, 0xec, 0x46,
				0xe9, 0x3c, 0x6e, 0x9f,
			},
			wantEq:  false,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := DecryptFile(tt.args.fileData, tt.args.key)
			if (err != nil) != tt.wantErr {
				t.Errorf("DecryptFile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if bytes.Equal(got, tt.want) != tt.wantEq {
				t.Errorf("DecryptFile() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestVerifyFileIntegrity(t *testing.T) {
	type args struct {
		fileData []byte
		key      []byte
	}
	tests := []struct {
		name    string
		args    args
		want    bool
		wantErr bool
	}{
		{
			name: "Verify example from docs",
			args: args{
				fileData: []byte{
					0x16, 0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
					0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
					0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
					0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
					0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
					0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
					0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
					0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
					0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
					0x17, 0x85,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
			},
			want:    true,
			wantErr: false,
		},
		{
			name: "Verify data from docs. Changed first byte",
			args: args{
				fileData: []byte{
					0xff, // 0x16
					0x65, 0xc8, 0x5c, 0x10, 0x0a, 0xb0, 0xa6, 0xa1, 0xcf, 0x32, 0xd3, 0x3c, 0x9e,
					0xdc, 0x64, 0x61, 0x57, 0x2c, 0xd0, 0xa9, 0xf6, 0x3f, 0x18, 0x67, 0x3a, 0x3c, 0x9d,
					0x16, 0x22, 0xbd, 0x90, 0x7c, 0x97, 0xf5, 0xd1, 0x16, 0x50, 0x57, 0xda, 0xbc, 0xc6,
					0xc6, 0x85, 0x6e, 0x30, 0xae, 0xb2, 0xa6, 0x0b, 0x37, 0x9c, 0xa5, 0xc5, 0xc9, 0xb2,
					0xea, 0xc0, 0x3c, 0xab, 0xb3, 0xbe, 0xa9, 0x32, 0x22, 0x64, 0x59, 0xaf, 0xf9, 0x5a,
					0x1d, 0xb4, 0x3a, 0x3d, 0x94, 0xa9, 0xc6, 0xb6, 0x65, 0xe9, 0x0f, 0x94, 0xeb, 0x5b,
					0xb0, 0x19, 0x21, 0x36, 0x98, 0x35, 0x1c, 0x74, 0x59, 0x19, 0x22, 0x1a, 0xa5, 0xf1,
					0xb5, 0x73, 0xea, 0x5d, 0x5a, 0x43, 0x53, 0xa8, 0x83, 0x03, 0xa2, 0xe4, 0x43, 0xab,
					0x58, 0x88, 0x9b, 0x14, 0x4c, 0x16, 0x41, 0x4b, 0x94, 0xb1, 0xc0, 0x55, 0x98, 0x24,
					0x17, 0x85,
				},
				key: []byte{
					0xd2, 0xf1, 0xd9, 0x6f, 0x9c, 0x4f, 0x52, 0x86, 0xee, 0x9c, 0xa3, 0x4c, 0xf8, 0x0b,
					0x9b, 0xe8, 0x15, 0x45, 0xae, 0xbf, 0x71, 0x9b, 0xab, 0x08, 0x40, 0x0c, 0xc2, 0xb9,
					0xf8, 0x01, 0xab, 0xcb,
				},
			},
			want:    false,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := VerifyFileIntegrity(tt.args.fileData, tt.args.key)
			if (err != nil) != tt.wantErr {
				t.Errorf("VerifyFileIntegrity() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("VerifyFileIntegrity() = %v, want %v", got, tt.want)
			}
		})
	}
}
