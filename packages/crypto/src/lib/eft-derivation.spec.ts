import {eftAesDerivation, eftAesDerivationNative, eftRsaDerivation, eftRsaDerivationNative} from './eft-derivation';
import {RsaKeyPair} from './types';
import {buf2Hex} from './utils';

const globalSalt = Buffer.from('137d63f71265a151c69a5158e20675b51ae359133fdcace8a7294b7af2f0d05d4561d8ea180b6698abb70ff110376517c6ad7968090c2d576b3dbf208af4e841', 'hex')
const address = '0x736367086A8920EF71C1F68a11e6CeB8b6026a13'
const seed = Buffer.from('94d7d898760df59af1097d7b34bd9d09', 'hex')

const rsaPreDerived: RsaKeyPair = {
  pub: Buffer.from('30820222300d06092a864886f70d01010105000382020f003082020a0282020100908b17d95cacb203d157c399be3db2525f05d1fa067a9ba8e1ee4d65c5120564b06ca8540cd9907cfc5d01a78e4d184d6db39b7c35e34bce2f46de554e1e3548a3e63bf0f0f141e7a153d04214924d2bb01317542c11b3bea50426b7bdad19e721d812b2bf299666c5bdd634b094639fc4508b3e3417101adaf0dd074876adb23e17df16a939de524547d7aef43348806bd885a75fdf3d4695557be1fd99ab14f7a6b79d2ab6f558b1fc638e3fdf2ef46c77f76167e0e233ea58a640e0a641c58f15d5a44f77303469b50e9cfa0eea75589daf435a88143d444e17ae62704afa5e5537bb8330378507babf7918012f64e77b6ded50da38ce88f781706a9b444d6545262917ea2ad01ba94284728ddd0bd6f403f39a03f47ddfc5e7f31bc8716457417cbd6cf490aace1c7e693ee67be6d1867f9900627f47a5e1a677ce4f389164a1c6e1c309ff93047db2ecfe4b5c13e22d4a134bdea2ab7434b5fc50bc99fc568c85cc0681d3a30787e354a4ba048512027a210fee868bf4c2fa4ae79a1d1e74d5d06649aeab8910c12ff8e5367d2f4ee68ddb28cdd87df2a28350975c8805ce30ec6f35bc33e739866b5847ccff173627bd81cdec2df0a70de22ecfacc6d6a7258b5b13423111cf2b3beb181207b8170831e23da936caf9bde6d9d5b9e2d14dc9bbba841bf575632fc156757e333c7036d6b6967505cf44bb855ab628b7930203010001', 'hex'),
  priv: Buffer.from('308209280201000282020100908b17d95cacb203d157c399be3db2525f05d1fa067a9ba8e1ee4d65c5120564b06ca8540cd9907cfc5d01a78e4d184d6db39b7c35e34bce2f46de554e1e3548a3e63bf0f0f141e7a153d04214924d2bb01317542c11b3bea50426b7bdad19e721d812b2bf299666c5bdd634b094639fc4508b3e3417101adaf0dd074876adb23e17df16a939de524547d7aef43348806bd885a75fdf3d4695557be1fd99ab14f7a6b79d2ab6f558b1fc638e3fdf2ef46c77f76167e0e233ea58a640e0a641c58f15d5a44f77303469b50e9cfa0eea75589daf435a88143d444e17ae62704afa5e5537bb8330378507babf7918012f64e77b6ded50da38ce88f781706a9b444d6545262917ea2ad01ba94284728ddd0bd6f403f39a03f47ddfc5e7f31bc8716457417cbd6cf490aace1c7e693ee67be6d1867f9900627f47a5e1a677ce4f389164a1c6e1c309ff93047db2ecfe4b5c13e22d4a134bdea2ab7434b5fc50bc99fc568c85cc0681d3a30787e354a4ba048512027a210fee868bf4c2fa4ae79a1d1e74d5d06649aeab8910c12ff8e5367d2f4ee68ddb28cdd87df2a28350975c8805ce30ec6f35bc33e739866b5847ccff173627bd81cdec2df0a70de22ecfacc6d6a7258b5b13423111cf2b3beb181207b8170831e23da936caf9bde6d9d5b9e2d14dc9bbba841bf575632fc156757e333c7036d6b6967505cf44bb855ab628b79302030100010282020011c24527db8f0c4013d4689fd713d578f15bd1b49a5f2e08cdd96d80f77983581fa4f9f979aab169e9c7b39056977a48e9158c20f2adfe7e52a8ae6064bca967475bde397820ec2bfd5242e01b8eee145409c46fff0a1dbf6a9edbf2ef46f94bc088bfa35e81498d4ef647ff2942d20aab200a3b9642cf23bd8aa25d66b5ce197c2f8aa54a1d66074da3ca0820d0bc33ab0c6b3f6934105f3fb1c50abb11ca474536229118d269ca7ff3b6779fb9581787cc2584be328f1839ceb27e7e1b6f314aa7301c83f6ece143ab8f2412450ae16805d7a6bad4c547d1c09680426ff1865958b7043ed609bc3a7ae35389737bd335eda04fec0323bf9c6c6c66d772442ddec8edcdb6a17726baacfbef702442037c9956e269586ad0566485d1557c2cf4c452e10a5e8b24fdfe725e9bd4f6b9f84b9cb561e44f85564a476e1600a71c9ebff2617180147845495098cb5c128b79bea2df69fd8cff0c43708eda60bcb18885845387c69125f35034ba05e5874d33770e41666e89c6ded56d0ca16e6daa49446aef4870922e83873dc9819d31b2761db570e357b3c4b0c28e5de6a31881e115e3473d1cbad6344dbab79835880a1beab4b5b7a871f080ae9cf4eb2c2c1e53e6c881658aeb7858571579af085a2cd48a81e25a35cbb25b64c238d3abe4cb36b0335f4d6d7f62936660d7f7e559118d17eef2280ee80cb280c0025f78cf42210282010100cd50432a370cb2a5faeae6316abeff71b837a2047aa76742babda16f3fc65106d36f22f71157112ef6beed00136f1d7eb94448903ae14c59149cee22a02790d15ef37289fa806d4e85a97c01bc2fceda224418c054e2d9ce20e4573bd504e5a17476979b893bc20b8c2cb1c20bbc25dd42de339806bf5ad002be74edcf4f9f5f49f6102816288b6e749d7cabd748f3e82960f7251403223c23f8e35691b7b246b37a88ed5e3af5d2b387908244c23e2e31d97e63e16ebe7ceba140ff73f77e1db635a14247455d36b1c9b9480a9cf40b68f19f856ad62729807638fde87b8df2a53d2c2748b1f77bb8e43438aa0075264f67cc552b6da8e841caa27c08cf137f0282010100b43a2d6f69bad253050766fe54a1656e6aa1d1dac478453a16c2f592e3561c440a20c5f5adf9b6a40bbfd6e797fdb2a061dc30b85817360dbcb500a61a47ca27a684f4342059ff5394225bed851143d65c2ff68ae3f09307b8e63c11405b6e7f8a0e032b76810f8ad2b91a991904655f0ecd05257609bcb140de6e4432e620f1b24ea7d8779b02ccb958f65724759f697a5c4d4eaba5d1b5afa8f9798b95ab99fa24fe6456ae0a9a2f4b5f00d560fd108ab53e57977cc4f4d759b2184e1f8582bae023a42b3550df95808425984ad154b2764e5263feee571afe3febcced39299506a9bf55f7a9307254c2a2036ab396e857af7bb58c86a94950acf6fe45d5ed028201006281e3f7d939ca6d409a7b9fb22bb9bc023b0f0d3f1c1abb3585ce72e6126cc5eda4210e91cf487b53ffff0e4e44bdce136de3b2efcd31287c6f5f0255fd25ca8ed81758844c2225ce93a6dfde3ec1ec7f0c5523d2969512054e095cb7b405c9156be109cb2a54cbdd9184282a2137b9955faf397de349db0bb5fdbc2bff73e3f0449333e88dc37857934841daa532016df90c1b4a22c6c63c2c2a475adadc3a77da8edff49a2d5fceab7876482f3a4e47b4a6a39d81d8fb6ec28bc1050ef5ffa370cfd25107c2d57f2fde29e68dafb9d9bc34617b050cfd28999076a298c55e6a519361b5cb4d869b0b42d2fd1e03174279f6dbd65e62f02cc0e07cca6d30590282010100af8cab8d0653af62a6575b7f08385d707bf53b4ff8679e26c2dd0c0f13d96096f5b68e9c8be5dc7d55e47b1402fc5eedd1e484a04b4df09cd8df05cec5727ffab73c72120421258ee78fc0334f964d99931a34ef7caf6cc7ecd67653e77827dd9b3fa2dec703577c455d8006f8534bda97b423fb254abebd790e3021c5e25adc926e0317db08e6653b74e81e61a920a9c141ff1b4e1eaa726ab410accfc5edec81b75f03a55ac980fde85095a34261bda71e7ba71e2bae3d3f36633f41797ab6a808832ef9d768fb1fc89aef73b40cca8f3aa577a36742091e85e105720aefcf0d15fc6a1ef6a99a430344c242c9c03c91fc37362cd4c0a64c7f84bae15a6cd1028201001fcaa59e47649ff0531a64f82518bc5e44e6cd90f3275104f32b39422974fb7ef9fb23b136b925e550ef85ea4f60d10a7e83553ced72f7439c84bb014ba6e1cd0ae325f7f77c70c987f88d18afea1f7de096a7bdb24e6706a01f8753ebdd27f5ceeeb44b2b30c9c05b3a98c639d5f237151ebd6496979786fbdf8590134b942e987eb423ad04020446571ba8c69fec0a186770e5a9b05d3c053bf2a86ad89c82f821fc714ee332f58d8fd866620f480b50129cb624c921ae5c00e50551fbd243b0461e55e796582a4294c27c89994d28b43762052c13804ca6af27d7ba7f04a00db2e86da8e7e9a6b47677c66a2dd9385f399bd97bdd7d68a5fe4a849b5b23ef', 'hex')
}

describe('eft-derivation', () => {
  describe('aes', () => {
    it('should be the same as native', async () => {
      const collectionAddress = Buffer.from(address.slice(2), 'hex')
      const tokenId = 8;
      const derivedKey = await eftAesDerivation(seed, globalSalt, collectionAddress, tokenId)
      const derivedKeyNative = await eftAesDerivationNative(window.crypto)(seed, globalSalt, collectionAddress, tokenId)
      expect(buf2Hex(derivedKey.key))
        .toEqual(buf2Hex(derivedKeyNative.key))
      expect(Buffer.from(derivedKey.iv).toString('hex'))
        .toEqual(Buffer.from(derivedKeyNative.iv).toString('hex'))
      expect(derivedKey.key.byteLength).toEqual(256/8)
      expect(derivedKey.iv.byteLength).toEqual(16)
    })
  })
  describe('rsa', () => {
    it('should derive keys', async () => {
      const collectionAddress = Buffer.from(address.slice(2), 'hex')
      const dealNumber = 2;
      const derivedKey = await eftRsaDerivation(seed, globalSalt, collectionAddress, dealNumber)
      // const derivedKeyNative = await eftRsaDerivationNative(window.crypto)(seed, globalSalt, collectionAddress, dealNumber)
      expect(buf2Hex(derivedKey.pub))
        .toEqual(buf2Hex(rsaPreDerived.pub))
      expect(buf2Hex(derivedKey.priv))
        .toEqual(buf2Hex(rsaPreDerived.priv))
    })
    it('should derive the same keys natively', async () => {
      const collectionAddress = Buffer.from(address.slice(2), 'hex')
      const dealNumber = 2;
      const derivedKey = await eftRsaDerivationNative(window.crypto)(seed, globalSalt, collectionAddress, dealNumber)
      // const derivedKeyNative = await eftRsaDerivationNative(window.crypto)(seed, globalSalt, collectionAddress, dealNumber)
      expect(buf2Hex(derivedKey.pub))
        .toEqual(buf2Hex(rsaPreDerived.pub))
      expect(buf2Hex(derivedKey.priv))
        .toEqual(buf2Hex(rsaPreDerived.priv))
    })
  })
})
