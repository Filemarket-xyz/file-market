import {rsaGenerateKeyPair} from './rsa';
import {removeSpaces} from './utils';

const SEED = Buffer.from(
  '6541c1895ad24fe201e0439ce152a6fda82eb2db0fdac6866336719ef932010bdf28f443f049dd05574940f8d5c00f0474f1e4b889c78cd5cf17f5db66dff2f7a8ef2ed70ca09d3d8d58396160ea2cde750cb783fc5c60317f410fdfe80d163f6b55685ee93ec0321b844545377c12e2c641ac6efd63ac379d9cf4fd9108e7dc8a62260142d2443c5fc51b26ff5574471091ec7dd796199c76ca8d40be595407c88438155e3171df99fd5725e0bf1997b81207230265e0ace18815c6b98e05bf975ba3837fa7e8cfbe75e9738db09235e0eb6f6502834a5dd691b3dcce81fb616a982f9c13419d366911721082dcf972c786f14def1e5d8ec19f827ee5909989af59f2223a1fe802c7f99f25eea75a2e7105de2d45f652b23dfdb5adf8093b71313f01592c224bd8a80861b2a445443f22f734b1b8b8f8de4c3988534ac31f6cf6e726fbea4b2c6fd59a3bc5184067ecda18b2b28b89bb32c08de8eb300f785d7108ecd7c2c45763fa4cef783c662becde071afc027cef2c9de353c2b545c2241437ab302de1a9693d12cb2e3c27e3d600f965771583fc6393537a4856c2cfc5c0b26a989a3202f6f50a2c44cf6b3d93e15bf3a9d7046da771b97437d9baa18a9b552e83e03782af7e97d9c15184d17a9019633f2017ad5978d4c2c16dca725f310eb984f75f25773350c2c38f8c920f714eac05e9b7194aaa57ba0707eb0de7',
  'hex'
)

const preGeneratedKey = removeSpaces(`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`)

describe('rsa', () => {
  it('should generate key', async () => {
    const key = await rsaGenerateKeyPair(SEED)
    expect(Buffer.from(key.priv).toString('base64')).toEqual(preGeneratedKey)
  })
  it('should use all randomness', async () => {
    const key = await rsaGenerateKeyPair(SEED.subarray(0, SEED.length / 2))
    expect(Buffer.from(key.priv).toString('hex')).not.toEqual(preGeneratedKey)
  })
})
